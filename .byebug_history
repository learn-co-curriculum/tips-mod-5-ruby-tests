exit
date
current
cont
current
cont
current
cont
current
cont
date
current
cont
date
current
cont
recurrence.match(jan31.advance(months: 1))
recurrence
cont
recurrence
recurrence.match(jan25.advance(months: 1))
jan25 = DateTime.parse('Jan 25, 2018')
jan31
recurrence
recurrence.match(jan31.advance(months: 1))
interval
jan31
start
recurrence.match(jan31.advance(months: 2))
recurrence.match(jan31.advance(months: 2)
recurrence.match(jan31)
jan31.advance(months: 2)
recurrence
start
recurrence
jan31.strftime('%D')
jan31
jan31.advance(months: 3)
jan31.advance(months: 2)
jan31.advance(months: 1)
jan31
cont
date
current
date
current
cont
recurrence.match(in_seven_days)
in_seven_days
recurrence.match(in_seven_days)
recurrence
cont
current <= date
current < date
date
current
cont
jan10.advance(weeks: 1)
jan10.advance(days: 1)
jan10.advance({days: 1})
jan10.advance(:days)
jan10.advance(1)
jan10.advance
jan10
date.match(jan10)
cont
date.match(jan10)
cont
date.match(jan10)
date
jan10
date
cont
date
dattet
cont
@start.strftime('%D')
start.strftime('%D')
cont
@start
date
cont
exit
self.match(jan10)
date
date.match(jan10)
jan10 = DateTime.parse('Jan 10, 2018')
jan10
date.match(jan10)
date
current.advance(days: @interval)
@period
current == date
date
current = @start
current
@period
@interval
@start
exit
